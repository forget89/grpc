// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc2
// source: phase.proto

package phase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhaseEqualibrium_Divide_FullMethodName      = "/phase_proto.PhaseEqualibrium/Divide"
	PhaseEqualibrium_Multiply_FullMethodName    = "/phase_proto.PhaseEqualibrium/Multiply"
	PhaseEqualibrium_Array_FullMethodName       = "/phase_proto.PhaseEqualibrium/Array"
	PhaseEqualibrium_ArrayDivide_FullMethodName = "/phase_proto.PhaseEqualibrium/ArrayDivide"
	PhaseEqualibrium_Init_FullMethodName        = "/phase_proto.PhaseEqualibrium/init"
	PhaseEqualibrium_Vle_FullMethodName         = "/phase_proto.PhaseEqualibrium/vle"
)

// PhaseEqualibriumClient is the client API for PhaseEqualibrium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhaseEqualibriumClient interface {
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*Response, error)
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*Response, error)
	Array(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	ArrayDivide(ctx context.Context, in *ArrayDivideRequest, opts ...grpc.CallOption) (*ArrayDivideResponse, error)
	Init(ctx context.Context, in *InitMessageRequest, opts ...grpc.CallOption) (*InitMessageResponse, error)
	Vle(ctx context.Context, in *VleMessageRequest, opts ...grpc.CallOption) (*VleMessageResponse, error)
}

type phaseEqualibriumClient struct {
	cc grpc.ClientConnInterface
}

func NewPhaseEqualibriumClient(cc grpc.ClientConnInterface) PhaseEqualibriumClient {
	return &phaseEqualibriumClient{cc}
}

func (c *phaseEqualibriumClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_Divide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseEqualibriumClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_Multiply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseEqualibriumClient) Array(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_Array_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseEqualibriumClient) ArrayDivide(ctx context.Context, in *ArrayDivideRequest, opts ...grpc.CallOption) (*ArrayDivideResponse, error) {
	out := new(ArrayDivideResponse)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_ArrayDivide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseEqualibriumClient) Init(ctx context.Context, in *InitMessageRequest, opts ...grpc.CallOption) (*InitMessageResponse, error) {
	out := new(InitMessageResponse)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phaseEqualibriumClient) Vle(ctx context.Context, in *VleMessageRequest, opts ...grpc.CallOption) (*VleMessageResponse, error) {
	out := new(VleMessageResponse)
	err := c.cc.Invoke(ctx, PhaseEqualibrium_Vle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhaseEqualibriumServer is the server API for PhaseEqualibrium service.
// All implementations must embed UnimplementedPhaseEqualibriumServer
// for forward compatibility
type PhaseEqualibriumServer interface {
	Divide(context.Context, *DivideRequest) (*Response, error)
	Multiply(context.Context, *MultiplyRequest) (*Response, error)
	Array(context.Context, *ArrayRequest) (*ArrayResponse, error)
	ArrayDivide(context.Context, *ArrayDivideRequest) (*ArrayDivideResponse, error)
	Init(context.Context, *InitMessageRequest) (*InitMessageResponse, error)
	Vle(context.Context, *VleMessageRequest) (*VleMessageResponse, error)
	mustEmbedUnimplementedPhaseEqualibriumServer()
}

// UnimplementedPhaseEqualibriumServer must be embedded to have forward compatible implementations.
type UnimplementedPhaseEqualibriumServer struct {
}

func (UnimplementedPhaseEqualibriumServer) Divide(context.Context, *DivideRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedPhaseEqualibriumServer) Multiply(context.Context, *MultiplyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedPhaseEqualibriumServer) Array(context.Context, *ArrayRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Array not implemented")
}
func (UnimplementedPhaseEqualibriumServer) ArrayDivide(context.Context, *ArrayDivideRequest) (*ArrayDivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayDivide not implemented")
}
func (UnimplementedPhaseEqualibriumServer) Init(context.Context, *InitMessageRequest) (*InitMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedPhaseEqualibriumServer) Vle(context.Context, *VleMessageRequest) (*VleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vle not implemented")
}
func (UnimplementedPhaseEqualibriumServer) mustEmbedUnimplementedPhaseEqualibriumServer() {}

// UnsafePhaseEqualibriumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhaseEqualibriumServer will
// result in compilation errors.
type UnsafePhaseEqualibriumServer interface {
	mustEmbedUnimplementedPhaseEqualibriumServer()
}

func RegisterPhaseEqualibriumServer(s grpc.ServiceRegistrar, srv PhaseEqualibriumServer) {
	s.RegisterService(&PhaseEqualibrium_ServiceDesc, srv)
}

func _PhaseEqualibrium_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseEqualibrium_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_Multiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseEqualibrium_Array_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).Array(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_Array_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).Array(ctx, req.(*ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseEqualibrium_ArrayDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayDivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).ArrayDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_ArrayDivide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).ArrayDivide(ctx, req.(*ArrayDivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseEqualibrium_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).Init(ctx, req.(*InitMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhaseEqualibrium_Vle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhaseEqualibriumServer).Vle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhaseEqualibrium_Vle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhaseEqualibriumServer).Vle(ctx, req.(*VleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhaseEqualibrium_ServiceDesc is the grpc.ServiceDesc for PhaseEqualibrium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhaseEqualibrium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phase_proto.PhaseEqualibrium",
	HandlerType: (*PhaseEqualibriumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Divide",
			Handler:    _PhaseEqualibrium_Divide_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _PhaseEqualibrium_Multiply_Handler,
		},
		{
			MethodName: "Array",
			Handler:    _PhaseEqualibrium_Array_Handler,
		},
		{
			MethodName: "ArrayDivide",
			Handler:    _PhaseEqualibrium_ArrayDivide_Handler,
		},
		{
			MethodName: "init",
			Handler:    _PhaseEqualibrium_Init_Handler,
		},
		{
			MethodName: "vle",
			Handler:    _PhaseEqualibrium_Vle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "phase.proto",
}
